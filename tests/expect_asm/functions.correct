.ORIG x3000
LD R5, BOTTOM_OF_STACK
LD R6, BOTTOM_OF_STACK
JSR main
HALT
BOTTOM_OF_STACK .FILL xF000
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; int add_(int a, int b)
add_
ADD R6, R6, #-1
PUSH R7
PUSH R5
.COPY R5, R6
; end of prologue
LDR R0, R5, #3 ; load a
LDR R1, R5, #4 ; load b
ADD R0, R0, R1
STR R0, R5, #2
BR add__ret
.ZERO R0
STR R0, R5, #2
BR add__ret
; epilogue
add__ret
POP R5
POP R7
RET
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; void foo()
foo
PUSH R7
PUSH R5
.COPY R5, R6
; end of prologue
BR foo_ret
; epilogue
foo_ret
POP R5
POP R7
RET
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; int main()
main
ADD R6, R6, #-1
PUSH R7
PUSH R5
.COPY R5, R6
ADD R6, R6, #-1
; end of prologue
.ZERO R0
ADD R0, R0, #4
PUSH R0
.ZERO R0
ADD R0, R0, #3
PUSH R0
JSR add_
ADD R6, R6, #3
LDR R0, R6, #-3
STR R0, R5, #-1
LDR R0, R5, #-1 ; load c
LD R1, imm30
ADD R0, R0, R1
STR R0, R5, #-1 ; store c
JSR foo
LDR R0, R5, #-1 ; load c
OUT
; epilogue
main_ret
ADD R6, R6, #1
POP R5
POP R7
RET
imm30 .FILL 0x30
.END
